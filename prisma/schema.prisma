// schema.prisma

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Entity {
    id                Int         @id @default(autoincrement())
    farcasterAccounts Farcaster[]
    ethereumAccounts  Ethereum[]
    links             Link[]
}

model Farcaster {
    fid      Int     @id
    fname    String?
    pfp      String?
    display  String?
    bio      String?
    source   String
    verified Boolean
    entityId Int

    entity Entity @relation(fields: [entityId], references: [id])
}

model Ethereum {
    address     String  @id
    source      String
    verified    Boolean
    sourceInput String?
    entityId    Int

    entity Entity? @relation(fields: [entityId], references: [id])
}

model Link {
    url         String
    metadata    Json?
    source      String
    verified    Boolean
    sourceInput String?
    deleted     Boolean @default(false)
    entityId    Int

    entity Entity? @relation(fields: [entityId], references: [id])

    @@id([url, entityId, source])
}

model FarcasterCast {
    fid       Int
    hash      String
    timestamp DateTime

    topParentCast String?
    topParentFid  Int?
    topParentUrl  String?

    parentCast String?
    parentFid  Int?
    parentUrl  String?

    text String

    deleted Boolean @default(false)

    urlEmbeds  FarcasterCastEmbedUrl[]
    castEmbeds FarcasterCastEmbedCast[]
    mentions   FarcasterCastMention[]

    @@id([fid, hash])
    @@index([timestamp(sort: Desc), fid])
    @@index([fid, timestamp(sort: Desc)])
}

model FarcasterCastEmbedUrl {
    fid       Int
    hash      String
    timestamp DateTime

    url                 String
    urlHost             String?
    urlPath             String?
    urlParams           String?
    contentType         String?
    contentLength       Int?
    contentLastModified DateTime?
    contentMetadata     Json?

    parsed  Boolean @default(false)
    deleted Boolean @default(false)

    cast FarcasterCast @relation(fields: [hash, fid], references: [hash, fid], onDelete: Cascade)

    @@id([fid, hash, url])
}

model FarcasterCastEmbedCast {
    fid       Int
    hash      String
    timestamp DateTime

    embedHash String
    embedFid  Int

    deleted Boolean @default(false)

    cast FarcasterCast @relation(fields: [hash, fid], references: [hash, fid], onDelete: Cascade)

    @@id([fid, hash, embedHash, embedFid])
}

model FarcasterCastMention {
    fid       Int
    hash      String
    timestamp DateTime

    mention         Int
    mentionPosition Int

    deleted Boolean @default(false)

    cast FarcasterCast @relation(fields: [hash, fid], references: [hash, fid], onDelete: Cascade)

    @@id([fid, hash, mention])
    @@index([mention, fid])
}

model FarcasterCastReaction {
    fid       Int
    timestamp DateTime

    targetHash   String
    targetFid    Int
    reactionType String

    deleted Boolean @default(false)

    @@id([fid, targetHash, targetFid, reactionType])
    @@index([targetFid, targetHash, reactionType])
}

model FarcasterUrlReaction {
    fid       Int
    timestamp DateTime

    targetUrl    String
    reactionType String

    deleted Boolean @default(false)

    @@id([fid, targetUrl, reactionType])
    @@index([targetUrl, reactionType])
}

model FarcasterCastKeyword {
    fid       Int
    hash      String
    timestamp DateTime

    keyword String
    score   Float

    deleted Boolean @default(false)

    @@id([fid, hash, keyword])
    @@index([keyword, timestamp])
    @@index([timestamp, keyword])
}

model Backfill {
    fid Int @id
}
